generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  email          String          @unique
  password       String
  displayName    String
  imageURL       String          @default("https://utfs.io/f/4a65c7f9-7bb1-4498-99bb-4148be482108-t9vzc5.png")
  chatA          Chat[]          @relation("joinChatAsParticipantA")
  chatB          Chat[]          @relation("joinChatAsParticipantB")
  myMessages     Message[]       @relation("sendMessage")
}

model Chat {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  participantA       User      @relation("joinChatAsParticipantA", fields: [participantAId], references: [id], onDelete: Cascade)
  participantAId     String    @db.ObjectId
  participantB       User      @relation("joinChatAsParticipantB", fields: [participantBId], references: [id], onDelete: Cascade)
  participantBId     String    @db.ObjectId
  participantAUnread Int       @default(0)
  participantBUnread Int       @default(0)
  messages           Message[] @relation("containMessages")
  lastUpdated        DateTime  @default(now())
}

model GroupChat {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  groupName String
  imageURL  String?
}

model Message {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  chat      Chat        @relation("containMessages", fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String      @db.ObjectId
  sender    User        @relation("sendMessage", fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String      @db.ObjectId
  type      MessageType
  text      String?
  pictures  String[]
  latitude  Float?
  longitude Float?
  sentAt    DateTime    @default(now())
}

enum MessageType {
  Text
  Images
  Location
}
